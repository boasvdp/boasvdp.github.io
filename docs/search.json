[
  {
    "objectID": "resources/shell-tutorial.html",
    "href": "resources/shell-tutorial.html",
    "title": "Shell tutorial",
    "section": "",
    "text": "This page lays out the exercises to learn shell scripting. The exercises are also used in the PHM III course for the ECDC fellowship.\nA lot of material has been adapted from existing resources such as Data Carpentry’s “Introduction to the Command Line for Genomics”1 and Software Carpentry’s “The Unix Shell”2.\n\n\n\n\n\n\n\n\nWhen doing these exercises, make sure you’re using a Linux shell and not the Windows Powershell!\nYou can confirm you’re using bash or another Linux shell by running this code: echo $0. This should return the name of the shell you’re running (e.g. bash)\n\n\n\nYour command line interface probably looks something like this:\nboas@mycomputer:~$\nThe $ sign indicates the “prompt” and means that the shell is waiting for your input. The text before the $ provides some basic information, usually which user is logged in (boas) at which machine (mycomputer) and what the current directory is (~ or “home”, we’ll get to what that means).\nMost shells also have a “cursor”, which indicates where typed text will appear. Usually, the cursor is a flashing block or line.\nCommands are run by typing them and pressing “Enter”. You can move the cursor using left and right arrows. In most shells, you can not change the position of the cursor by clicking with your mouse.\n\n\n\n\nCopying and pasting: You can copy text from the command line by selecting it with your mouse. To paste, right-click in the terminal window.\nCommand history: You can use the up and down arrow keys to scroll through your command history. This is useful for repeating commands or correcting mistakes.\nTab completion: You can use the Tab key to auto-complete file and directory names. This is useful for long or complex names. Double-tapping the Tab key will show you all possible completions.\nCommand line shortcuts:\n\nCtrl + C: Cancel the current command.\nCtrl + Z: Suspend the current command. Suspended commands can be resumed in the foreground (using fg) or in the background (bg).\nCtrl + D: Log out of the shell or close the terminal window.\nCtrl + L: Clear the screen.\n\nCommand line help: You can use the man command to get help on any command. For example, man ls will show you the manual page for the ls command.",
    "crumbs": [
      "Home",
      "Resources",
      "Shell tutorial"
    ]
  },
  {
    "objectID": "resources/shell-tutorial.html#background",
    "href": "resources/shell-tutorial.html#background",
    "title": "Shell tutorial",
    "section": "",
    "text": "This page lays out the exercises to learn shell scripting. The exercises are also used in the PHM III course for the ECDC fellowship.\nA lot of material has been adapted from existing resources such as Data Carpentry’s “Introduction to the Command Line for Genomics”1 and Software Carpentry’s “The Unix Shell”2.\n\n\n\n\n\n\n\n\nWhen doing these exercises, make sure you’re using a Linux shell and not the Windows Powershell!\nYou can confirm you’re using bash or another Linux shell by running this code: echo $0. This should return the name of the shell you’re running (e.g. bash)\n\n\n\nYour command line interface probably looks something like this:\nboas@mycomputer:~$\nThe $ sign indicates the “prompt” and means that the shell is waiting for your input. The text before the $ provides some basic information, usually which user is logged in (boas) at which machine (mycomputer) and what the current directory is (~ or “home”, we’ll get to what that means).\nMost shells also have a “cursor”, which indicates where typed text will appear. Usually, the cursor is a flashing block or line.\nCommands are run by typing them and pressing “Enter”. You can move the cursor using left and right arrows. In most shells, you can not change the position of the cursor by clicking with your mouse.\n\n\n\n\nCopying and pasting: You can copy text from the command line by selecting it with your mouse. To paste, right-click in the terminal window.\nCommand history: You can use the up and down arrow keys to scroll through your command history. This is useful for repeating commands or correcting mistakes.\nTab completion: You can use the Tab key to auto-complete file and directory names. This is useful for long or complex names. Double-tapping the Tab key will show you all possible completions.\nCommand line shortcuts:\n\nCtrl + C: Cancel the current command.\nCtrl + Z: Suspend the current command. Suspended commands can be resumed in the foreground (using fg) or in the background (bg).\nCtrl + D: Log out of the shell or close the terminal window.\nCtrl + L: Clear the screen.\n\nCommand line help: You can use the man command to get help on any command. For example, man ls will show you the manual page for the ls command.",
    "crumbs": [
      "Home",
      "Resources",
      "Shell tutorial"
    ]
  },
  {
    "objectID": "resources/shell-tutorial.html#exercises",
    "href": "resources/shell-tutorial.html#exercises",
    "title": "Shell tutorial",
    "section": "Exercises",
    "text": "Exercises\nDownload the zip file with the exercises from the link in the right sidebar. Either download by left-clicking and save this in your Linux home directory, or use these commands:\ncd\nwget https://github.com/boasvdp/boasvdp.github.io/raw/refs/heads/main/files/shell-tutorial.zip\nunzip shell-tutorial.zip\ncd shell-tutorial\n \n\n1. Navigating a file system\nThese couple of exercises will demonstrate how you can move throughout your file system.\n\nCheck your current working directory\nLet’s first check where we are by running pwd:\npwd\nReturns:\n/home/boas/shell-tutorial\nWhere boas will be replaced by your own user name.\n\nLet’s see what the contents of this directory are:\nls\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nFour different directories should be present:\n01_navigation  02_files  03_pipes  04_scripting\n\n\n\n\n\n\nChanging directories\nNow, cd into the directory for this exercise and check the contents of this directory (try out auto-completion by pressing Tab):\ncd 01_navigation\nls\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nproject_A  project_B\n\n\n\n\nWe’ll need to cd into the first directory and check its contents. How would you do this?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nYou can run these commands:\ncd project_A\nls\nWhich returns:\ndata  report.txt\n\n\n\n\nSuddenly you remember you already wrote a report for this project, and need to work on the other project. We’ll need to navigate to the other project’s directory.\nTry running cd project_B and see if this takes you to the other project’s directory. Why doesn’t this work?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe directory project_B is not present in your current directory.\nYou can confirm this by running ls on your working directory.\n\n\n\nSo how would you get to this other directory using ls and cd?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nFrom the project_A directory, you could ls the parent directory:\nls ..\nWhich would (again) show you:\nproject_A  project_B\nWith ls you are just listing contents. To actually go into the project_B directory, you would need to use cd:\ncd ..\ncd project_B\nOr in one go: cd ../project_B\n\n\n\n\n\n\n\n\n\nRemember, if you ever get lost, the command cd ~ will return you to your home directory. This is also accomplished by just running cd without any argument.\n\n\n\n\n\n\nAbsolute paths\nWe have been using relative paths so far, but let’s see if we can go to another directory using absolute paths. This will require some puzzling.\nStart off by checking your current working directory using pwd (returning /home/boas/shell-tutorial/01_navigation/project_B for me).\nRemembering the project_A directory is “next to” the project_B directory, how could we use cd to this directory using an absolute path?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\ncd /home/boas/shell-tutorial/01_navigation/project_A\n\n\n\n\n\n\nReplace boas in this example by your own user name!\n\n\n\nWhen getting acquainted with navigating file systems, it might help to draw a (mental) picture of the system like this:\n\n\n\nAbsolute path example\n\n\n\n\n\n\n\n\n2. Viewing and changing files\nFirst, navigate to the 02_files directory for the following exercises.\n\nPrinting the contents of a file\nLet’s start with some basic file inspection tools.\nWe’ll begin by taking a look at the contents of our linelist in CSV format.\ncat data/linelist.csv\n\n\n\n\n\n\nAnswer\n\n\n\n\n\ncaseID,date\n1,2025-06-21\n2,2025-06-21\n3,2025-06-22\n4,2025-06-22\n5,2025-06-22\n6,2025-06-23\n7,2025-06-23\n8,2025-06-23\n9,2025-06-23\n10,2025-06-24\n11,2025-06-24\n12,2025-06-24\n13,2025-06-24\n14,2025-06-25\n15,2025-06-25\n16,2025-06-25\n17,2025-06-25\n18,2025-06-25\n19,2025-06-26\n20,2025-06-26\n21,2025-06-26\n22,2025-06-26\n\n\n\nWhat does cat do here?\n\n\n\n\n\n\nThe cat command (“concatenate”) reads files and writes them to standard output. In this case, it just prints the contents of the file.\n\n\n\n\nWhat if you only want to see the first ten lines of the file?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nTry:\nhead data/linelist.csv\ncaseID,date\n1,2025-06-21\n2,2025-06-21\n3,2025-06-22\n4,2025-06-22\n5,2025-06-22\n6,2025-06-23\n7,2025-06-23\n8,2025-06-23\n9,2025-06-23\n\n\n\nNow try limiting it to just the first 2 lines:\nhead -n 2 data/linelist.csv\nHow would you do the reverse — see the last two lines?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nUse the tail command:\ntail -n 2 data/linelist.csv\n\n\n\n\n\n\nViewing large files\nIf you want to see the entire file, you can use cat, but this is not very practical for large files.\nLet’s try another useful command for inspecting larger files: less.\nless data/linelist.csv\n\n\n\n\n\n\nless opens a temporary view and will not print anything.\nYou can scroll through the file with the arrow keys, or press q to quit.\n\n\n\n\nAnother method could be extracting just the lines you’re interested in from a large file.\nSuppose you want to find all cases from June 21st, 2025.\nTry using grep (using the command structure grep &lt;PATTERN&gt; &lt;FILE&gt;).\n\n\n\n\n\n\nAnswer\n\n\n\n\n\ngrep \"2025-06-21\" data/linelist.csv\n\n\n\nLooking at the answer, is there anything missing from the output? Why?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n1,2025-06-21\n2,2025-06-21\nThe header row is not printed (does not contain the string “2025-06-21”).\n\n\n\n\n\n\nCopying, moving and removing files\nLet’s now learn how to make a copy of a file.\nMake a backup of the linelist:\ncp data/linelist.csv data/linelist_backup.csv\nUse ls to confirm the file was copied:\nls data/\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nlinelist.csv  linelist_backup.csv\n\n\n\n\nLet’s rename the backup file using mv to linelist_old.csv. How would you do this?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nmv data/linelist_backup.csv data/linelist_old.csv\n\n\n\nCheck the result again with ls.\nWhat would happen if you ran the mv command with an existing file name?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe existing file would be overwritten without warning unless you use the -i (interactive) option:\nmv -i file1 file2\n\n\n\n\nWe now have an outdated file that we no longer need. Let’s remove it.\nrm data/linelist_old.csv\nCheck again:\nls data/\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nlinelist.csv\n\n\n\n⚠️ Be careful with rm! Once you delete a file this way, you can usually not recover it from the trash bin.\n\n\n\nCreating and editing files\nNow, let’s edit a file.\nLet’s open the report in a text editor:\nnano reports/my_report.txt\n\n\n\n\n\n\nIf you get an error similar to nano: command not found, let one of the facilitators know.\n\n\n\nTry adding a line like:\nSummary written on June 23, 2025.\n\n\n\n\n\n\nTo save your changes:\n\nPress Ctrl + S (to save)\nPress Ctrl + X (to exit)\n\n\n\n\nCheck the result:\ncat reports/my_report.txt\n\nLet’s say you want to move the report to the data/ directory instead of reports/.\nmv reports/my_report.txt data/\nNow list both directories:\nls reports/\nls data/\nHas the file name of the report changed?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThe file my_report.txt should now appear in data/ and be gone from reports/. However, the file has not been renamed, just moved.\nCompare these commands for example:\n1mv file.txt directory1/\n2mv file.txt other_file.txt\n3mv file.txt directory1/other_file.txt\n\n1\n\nMoves file.txt to directory1/ and keeps the same name.\n\n2\n\nRenames file.txt to other_file.txt in the current directory.\n\n3\n\nMoves file.txt to directory1/ and renames it to other_file.txt.\n\n\n\n\n\n\n\n\n3. Pipes and redirection\nIn this section, we’ll learn how to redirect output into files and how to use pipes to chain commands together. The files needed for these exercises are in the directory 03_pipes.\n\nRedirecting output\nLet’s try redirecting the standard output (STDOUT) of a command to a file.\nls data &gt; overviews/files_list.txt\nHow would you check the contents of the newly created file?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nFor example using less or cat, maybe head or tail.\nIn any case, the contents of the file should be:\nlinelist.csv\n\n\n\nNow append another line to this file, by echo-ing a string to STDOUT:\necho \"More data files may appear here.\" &gt;&gt; overviews/files_list.txt\nView the file contents again:\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nlinelist.csv\nMore data files may appear here.\n\n\n\n\n\n\nPipes\nWe can use pipes to connect commands, just as in R. Start by showing the last ten cases in our linelist:\n\n\n\n\n\n\nAnswer\n\n\n\n\n\ntail data/linelist.csv\n\n\n\nNow let’s say we want to see the last ten cases, but only the dates. We can do this by piping the output of tail into cut:\ntail data/linelist.csv | cut -d',' -f2\n\n\n\n\n\n\nThe cut command can be used to extract specific columns from a file.\nThe -d flag specifies the delimiter (in this case, a comma), and the -f flag specifies which field to extract.\nCheck man cut for more details.\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n2025-06-24\n2025-06-25\n2025-06-25\n2025-06-25\n2025-06-25\n2025-06-25\n2025-06-26\n2025-06-26\n2025-06-26\n2025-06-26\n\n\n\nLet’s count how many times each date appears:\ntail data/linelist.csv | cut -d',' -f2 | sort | uniq -c\n\n\n\n\n\n\nuniq is used to deduplicate lines. Use man uniq to see what flag -c does.\n⚠️ uniq only deduplicates adjacent lines, so you typically sort the output first.\n\n\n\nWhich data is most common in the last ten cases?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n      1 2025-06-24\n      4 2025-06-25\n      5 2025-06-26\nThe most common date is 2025-06-26, which appears 5 times.\nBonus question: can you sort this output on a descending number of cases? Check man sort for some ideas.\n\n\n\n\n\n\n4. Scripting\nNavigate to 04_scripting for these exercises.\n\nVariables\nYou can define a variable like this:\nGREETING=\"Hello\"\nHow would you assign your own name to the variable NAME?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nIn my case:\nNAME=\"Boas\"\n\n\n\nYou can reference them like this, using the $ sign:\necho $GREETING $NAME\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nHello Boas\n\n\n\n\n\n\nQuoting: single vs. double quotes\nWhat happens when we use single quotes instead of double quotes around variables?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\necho \"$GREETING $NAME\"\necho '$GREETING $NAME'\nreturns:\nHello Boas\n$GREETING $NAME\nSingle quotes do not expand variables, while double quotes do.\n\n\n\n\n\n\nThe importance of quoting variables\nLet’s say you want to copy a file whose name is stored in a variable. However, the file name contains a space:\nFILENAME=\"sequences/complex name.fasta\"\n\ncp $FILENAME temp/\nWhat happens?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThis will try to copy two files: sequences/complex and name.fasta, which don’t exist!\n\n\n\nThe correct approach is:\ncp \"$FILENAME\" temp/\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThis safely copies the file with a space in the name.\nls temp/\ncomplex name.fasta\n\n\n\n\n\n\nWildcards\nLet’s list all .fasta files:\nls sequences/*.fasta\nWhat if we only want files that start with sample?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nls sequences/sample*.fasta\n\n\n\nWhich sample is not found using the below code?\nls sequences/sample?.fasta\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nThis matches files like sample1.fasta and sample2.fasta, etc. It expects exactly one character after sample.\nThe file sample404.fasta is not found, as ? does not match the string 404.\n\n\n\n\n\n\nWriting and running a simple loop\nLet’s create a script that prints a message for every sequence file.\nOpen the script using nano:\nnano loop_sequences.sh\nPaste the following into the file:\nfor file in sequences/*.fasta\ndo\n  echo \"Processing file: $file\"\ndone\nSave and exit (Ctrl+S, then Ctrl+X).\nThen run the script using:\nbash loop_sequences.sh\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nProcessing file: sequences/sample1.fasta\nProcessing file: sequences/sample2.fasta\nProcessing file: sequences/sample404.fasta\nProcessing file: sequences/complex name.fasta\n\n\n\n\n\n\nUsing a pipe in a for loop\nAs with many things in bash, you can combine different concepts to achieve more complex tasks.\nLet’s say you want to count the number of sequences in each file. You can do this by using wc -l to count the lines in the file, and then use cut to extract just the number of lines.\nOpen the script again:\nnano loop_sequences.sh\nAnd replace the contents with the following:\nfor file in sequences/*.fasta\ndo\n  echo \"Processing file: $file\"\n  wc -l \"$file\" | cut -d' ' -f1\ndone\nSave and run the script again. Which file contains most lines?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nProcessing file: sequences/complex name.fasta\n2\nProcessing file: sequences/sample1.fasta\n2\nProcessing file: sequences/sample2.fasta\n6\nProcessing file: sequences/sample404.fasta\n1\nThe file sample2.fasta contains the most lines (6).\n\n\n\nCan you explain what every line is doing in this for loop?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n1for file in sequences/*.fasta\n2do\n3  echo \"Processing file: $file\"\n4  wc -l \"$file\" | cut -d' ' -f1\n5done\n\n1\n\nFinds all files matching the pattern sequences/*.fasta and stores them in the variable $file one by one\n\n2\n\nNeeded in a for loop, indicates the start of repeated commands\n\n3\n\nPrints the file name to the screen\n\n4\n\nUses wc -l to count the number of lines per file, pipes this into cut which then extracts the first field, using a space as separator.\n\n5\n\nNeeded in a for loop, indicates the end of the repeated commands",
    "crumbs": [
      "Home",
      "Resources",
      "Shell tutorial"
    ]
  },
  {
    "objectID": "resources/shell-tutorial.html#further-exercises",
    "href": "resources/shell-tutorial.html#further-exercises",
    "title": "Shell tutorial",
    "section": "Further exercises",
    "text": "Further exercises\nIf you’re done early and want to check out some extra stuff that makes shell scripting much more powerful, check out:\n\nLessons 6 and 7 of https://carpentry.library.ucsb.edu/CustomLibraryBash/\nAny extra material from https://carpentries-incubator.github.io/shell-extras/",
    "crumbs": [
      "Home",
      "Resources",
      "Shell tutorial"
    ]
  },
  {
    "objectID": "resources/shell-tutorial.html#references",
    "href": "resources/shell-tutorial.html#references",
    "title": "Shell tutorial",
    "section": "References",
    "text": "References",
    "crumbs": [
      "Home",
      "Resources",
      "Shell tutorial"
    ]
  },
  {
    "objectID": "resources/shell-tutorial.html#footnotes",
    "href": "resources/shell-tutorial.html#footnotes",
    "title": "Shell tutorial",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nErin Alison Becker, Anita Schürch, Tracy Teal, Sheldon John McKay, Jessica Elizabeth Mizzi, François Michonneau, et al. (2019, June). datacarpentry/shell-genomics: Data Carpentry: Introduction to the shell for genomics data, June 2019 (Version v2019.06.1). Zenodo. http://doi.org/10.5281/zenodo.3260560↩︎\nGabriel A. Devenyi (Ed.), Gerard Capes (Ed.), Colin Morris (Ed.), Will Pitchers (Ed.), Greg Wilson, Gerard Capes, Gabriel A. Devenyi, Christina Koch, Raniere Silva, Ashwin Srinath, … Vikram Chhatre. (2019, July). swcarpentry/shell-novice: Software Carpentry: the UNIX shell, June 2019 (Version v2019.06.1). Zenodo. http://doi.org/10.5281/zenodo.3266823↩︎",
    "crumbs": [
      "Home",
      "Resources",
      "Shell tutorial"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Although most methods I apply are bioinformatics-oriented, I consider myself primarily a microbiologist. My work has focused on Escherichia coli, vaccine-preventable pathogens (N. meningitidis, H. influenzae), invasive streptococci (S. pyogenes, S. suis) and other public health relevant pathogens such as TB, Salmonella, Vibrio cholerae, Shigella sonnei, Candida auris and Aspergillus fumigatus.",
    "crumbs": [
      "Home",
      "About"
    ]
  },
  {
    "objectID": "about.html#jobs",
    "href": "about.html#jobs",
    "title": "About",
    "section": "Jobs",
    "text": "Jobs\n\nEUPHEM fellow, RIVM, 2024-2026\nTeam lead microbial bioinformatics, RIVM, 2022-2024\nPostdoctoral researcher, NRLBM/Amsterdam UMC, 2021-2022\nPhD student, AIGHD/Amsterdam UMC, 2017-2021",
    "crumbs": [
      "Home",
      "About"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Boas van der Putten",
    "section": "",
    "text": "I’m a public health microbiologist at the Dutch National Institute for Public Health and the Environment (RIVM).\nCurrently, I’m enrolled in the EUPHEM fellowship, organised by the European Center for Disease Prevention and Control (ECDC). The fellowship provides training and experience in microbiological and epidemiological methods for applied public health work.\nI’m also one of the coordinators of the SIG-BIMM (Special Interest Group for Bioinformatics in Medical Microbiology), part of the NVMM. We organise symposia twice per year on microbial bioinformatics, and in general try to advance the field in the Netherlands."
  }
]